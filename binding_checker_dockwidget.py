# -*- coding: utf-8 -*-
"""
/***************************************************************************
 BindingCheckerDockWidget
                                 A QGIS plugin
 To check binding of raster
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2023-11-19
        git sha              : $Format:%H$
        copyright            : (C) 2023 by axinav
        email                : axinav@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os
import logging
from pathlib import Path

from qgis.PyQt import QtGui, QtWidgets, uic
from qgis.PyQt.QtCore import QSize, pyqtSignal, Qt
from qgis.PyQt.QtSql import QSqlQuery, QSqlQueryModel
from qgis.gui import QgisInterface, QgsMapCanvas, QgsMapLayerComboBox, QgsMapToolPan, QgsMapToolZoom
from qgis.core import QgsCoordinateReferenceSystem, QgsCoordinateTransform, QgsMapLayerProxyModel, QgsMapRendererJob, QgsMapRendererParallelJob, QgsMapSettings, QgsProject

from .create_report import createAppendix11, createAppendix12

from .my_data_types import *
from .my_docx import *

# FORM_CLASS, _ = uic.loadUiType(os.path.join(
    # os.path.dirname(__file__), 'binding_checker_dockwidget_base.ui'))
logging.basicConfig(filename=os.path.join(os.path.dirname(__file__),'app.log'), level=logging.DEBUG)

class BindingCheckerDockWidget( QtWidgets.QDockWidget ):
    closingPlugin = pyqtSignal()
    def __init__(self, parent=None, iface=None):
        super(BindingCheckerDockWidget,self).__init__(parent)
        # super(BindingCheckerDockWidget,self).__init__(parent)
        self.tabWidget=QtWidgets.QTabWidget(self)
        self.tabWidget.setGeometry(0,0,577,572)
        pointWidget =PointCheckerWidget(iface=iface)
        self.tabWidget.addTab(pointWidget,'Point')
        # layout = QtWidgets.QVBoxLayout()
        # layout.addWidget(self.tabWidget)
        # self.setLayout(layout)
    def closeEvent(self, event):
        self.curFeat = 0
        self.closingPlugin.emit()
        event.accept()

class TabWidget(QtWidgets.QTabWidget):
    def __init__(self, parent= None) -> None:
        super().__init__(parent)
        pointTab = PointCheckerWidget()
        self.addTab(pointTab,'Point')
        
class PointCheckerWidget(QtWidgets.QWidget):
    closingPlugin = pyqtSignal()

    def __init__(self, conection=None, parent=None,iface=None):
        """Constructor."""
        super(PointCheckerWidget, self).__init__(parent)
        # Set up the user interface from Designer.
        # After setupUI you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://doc.qt.io/qt-5/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        # self.setupUi(self)
        # self.con = conection
        # if self.con.isOpen():
        #     logging.debug('connection opening')
        logging.debug("loading")
        self.iface = iface
        curLayer=self.iface.currentLayer()
        self.projectDir = QgsProject.instance().homePath()
        self.curFeat = 0
        self.pntTableId = self.getLastIdPoints()
        self.yanexLayer = QgsProject.instance().mapLayersByName('Yandex Satellite')[0]
        self.regionCBox = QtWidgets.QComboBox(self)
        self.regionCBox.setGeometry(10, 10, 191, 22)
        self.regionModel = QSqlQueryModel()
        self.regionModel.setQuery('select * from regions')
        self.regionCBox.setModel(self.regionModel)
        self.regionCBox.setModelColumn(2)
        self.regionCBox.currentIndexChanged.connect(self.regionCBoxChanged)

        self.districtCBox = QtWidgets.QComboBox(self)
        self.districtCBox.setGeometry(220,10,191,22)
        self.districtModel = QSqlQueryModel()
        self.districtCBox.setModel(self.districtModel)

        self.rastrNameLineEdit = QtWidgets.QLineEdit(self)
        self.rastrNameLineEdit.setGeometry(10,40,401,21)

        self.rastrLayerCB = QgsMapLayerComboBox(self)
        self.rastrLayerCB.setGeometry(10,70,191,22)
        self.rastrLayerCB.setFilters(QgsMapLayerProxyModel.Filter.RasterLayer)

        # self.rLayerToCanvasPB = QtWidgets.QPushButton(self,'v')
        # self.rLayerToCanvasPB.setGeometry(210,70,21,21)
        self.pointLayerCB = QgsMapLayerComboBox(self)
        self.pointLayerCB.setGeometry(220,70,191,22)
        self.pointLayerCB.setFilters(QgsMapLayerProxyModel.Filter.PointLayer)


        self.rCanvas = QgsMapCanvas(self)
        self.rCanvas.setGeometry(10,100,266,266)
        self.rCanvas.setCanvasColor(Qt.white)
        self.rCanvas.mapSettings().setDestinationCrs(QgsCoordinateReferenceSystem("EPSG:3395"))

        self.gCanvas = QgsMapCanvas(self)
        self.gCanvas.setGeometry(300,100,266,266)
        self.gCanvas.setCanvasColor(Qt.white)
        self.gCanvas.mapSettings().setDestinationCrs(QgsCoordinateReferenceSystem("EPSG:3395"))

        self.addRastrToCanvas(self.rastrLayerCB.currentLayer())

        self.toolBar = QtWidgets.QToolBar(self)
        self.toolBar.setGeometry(10,380,266,25)

        self.actionZoomIn = QtWidgets.QAction("Zoom in", self)
        self.actionZoomOut = QtWidgets.QAction("Zoom out", self)
        self.actionPan = QtWidgets.QAction("Pan", self)

        self.actionZoomIn.setCheckable(True)
        self.actionZoomOut.setCheckable(True)
        self.actionPan.setCheckable(True)

        self.actionZoomIn.triggered.connect(self.zoomIn)
        self.actionZoomOut.triggered.connect(self.zoomOut)
        self.actionPan.triggered.connect(self.pan)

        # self.pBtn1.addAction(self.actionPan)
        # self.pBtn1.clicked.connect(self.actionPan.trigger)
        # self.toolbar = self.addToolBar("Canvas actions")
        self.toolBar.addAction(self.actionZoomIn)
        self.toolBar.addAction(self.actionZoomOut)
        self.toolBar.addAction(self.actionPan)

        # create the map tools
        self.toolPan = QgsMapToolPan(self.rCanvas)
        self.toolPan.setAction(self.actionPan)
        # self.toolPan2.panDistanceBearingChanged.connect(self.pan2)
        self.toolZoomIn = QgsMapToolZoom(self.rCanvas, False) # false = in
        self.toolZoomIn.setAction(self.actionZoomIn)
        self.toolZoomOut = QgsMapToolZoom(self.rCanvas, True) # true = out
        self.toolZoomOut.setAction(self.actionZoomOut)

        self.nextPushBtn = QtWidgets.QPushButton('NEXT', self)
        self.nextPushBtn.setGeometry(10,420,81,21)
        self.nextPushBtn.clicked.connect(self.nextFeat)

        self.matchPushBtn = QtWidgets.QPushButton('Совпадает', self)
        self.matchPushBtn.setGeometry(190,420,81,21)
        self.matchPushBtn.clicked.connect(lambda:self.checkPnt(self.matchPushBtn.text()))

        self.misMatchPushBtn = QtWidgets.QPushButton('Не совпадает', self)
        self.misMatchPushBtn.setGeometry(300,420,81,21)
        self.misMatchPushBtn.clicked.connect(lambda:self.checkPnt(self.misMatchPushBtn.text()))
        # self.pan()
        self.reportPushBtn = QtWidgets.QPushButton('Отчет', self)
        self.reportPushBtn.setGeometry(240,490,80,21)
        self.reportPushBtn.clicked.connect(self.createReport)



        self.rastrLayerCB.layerChanged.connect(self.addRastrToCanvas)

        

    def zoomIn(self):
        self.rCanvas.setMapTool(self.toolZoomIn)

    def zoomOut(self):
        self.rCanvas.setMapTool(self.toolZoomOut)

    def pan(self):
        self.rCanvas.setMapTool(self.toolPan)

    def getLastIdPoints(self):
        query = QSqlQuery('SELECT id FROM points')
        if query.last():
            return query.value('id')+1
        else: return 1

    def getExtentRestangle(self, pntGeom):
        return pntGeom.boundingBox().buffered(335.0)

    def getXform3395(self, layer):
        crsDest = QgsCoordinateReferenceSystem("EPSG:3395")
        crsSrc = layer.crs()
        xformContext = QgsProject.instance().transformContext()
        return QgsCoordinateTransform(crsSrc, crsDest, xformContext)

    def getPntLayerOnRaster(self, layers):
        rastLayer = self.rastrLayerCB.currentLayer()
        rastExtent = self.getXform3395(rastLayer).transform(rastLayer.extent())
        for layer in layers:
            if rastExtent.contains(layer.extent()):
                return layer
                
    def getLayersInCB(self, layerCB):
        layers = []
        count = layerCB.count()
        for i in range(count):
            layers.append(layerCB.layer(i))
        return layers

    def getExtentByFeatId(self, layer, featId=0):
        feat = layer.getFeature(featId)
        restangleLayerCrs = self.getExtentRestangle(feat.geometry())
        xform = self.getXform3395(layer)
        return xform.transform(restangleLayerCrs)

    # def setCanvasExtentByPnt(self, pntLayer, featId):
    def isNextFeatExist(self, pntLayer):
        return len(list(pntLayer.getFeatures()))-1>self.curFeat

    def addRastrToCanvas(self, curLayer):
        self.curFeat = 0
        self.rCanvas.setDestinationCrs(QgsCoordinateReferenceSystem("EPSG:3395"))
        # self.rCanvas.setExtent(self.getXform3395(curLayer).transformBoundingBox(curLayer.extent()))
        # self.rCanvas.setLayers([curLayer])
        pntLayer =self.getPntLayerOnRaster(self.getLayersInCB(self.pointLayerCB))
        self.pointLayerCB.setCurrentText(pntLayer.name())
        canvasLayers = []
        if pntLayer:        

            canvasLayers.append(pntLayer)

        canvasLayers.append(curLayer)
        self.rCanvas.setLayers(canvasLayers)
        # self.rCanvas.setExtent(self.getExtentByFeatId(pntLayer, self.curFeat))
        self.rCanvas.setExtent(self.getExtentByFeatId(self.pointLayerCB.currentLayer(),self.curFeat))
        self.gCanvas.setLayers([pntLayer, self.yanexLayer])
        self.gCanvas.setExtent(self.getExtentByFeatId(pntLayer, self.curFeat))
        self.rCanvas.refresh()
        self.gCanvas.refresh()

    def nextFeat(self):
        if self.isNextFeatExist(self.pointLayerCB.currentLayer()):
            self.curFeat+=1
            self.rCanvas.setExtent(self.getExtentByFeatId(self.pointLayerCB.currentLayer(),self.curFeat))
            self.rCanvas.refresh()
            self.gCanvas.setExtent(self.getExtentByFeatId(self.pointLayerCB.currentLayer(),self.curFeat))
            self.gCanvas.refresh()

    def checkPnt(self, stat):
        status = 0
        if stat == 'Совпадает':
            status = 1
        id =self.pntTableId
        nomer = self.curFeat+1
        picrName = (self.rastrLayerCB.currentText()+'_picr_'+str(id)+'.png')
        picr = str(Path(self.projectDir)/'Pic'/picrName)
        picgName = (self.rastrLayerCB.currentText()+'_picg_'+str(id)+'.png')
        picg = str(Path(self.projectDir)/'Pic'/picgName)
        farmname = self.rastrNameLineEdit.text()
        districtid = self.districtModel.record(self.districtCBox.currentIndex()).value(0)
        queryStr = """INSERT INTO points
        (id, nomer, status, picr, picg, farmname, districtid)
        VALUES (:id, :nomer, :status, :picr, :picg, :farmname, :districtid)"""
        query = QSqlQuery()
        query.prepare(queryStr)
        query.bindValue(':id', id)
        query.bindValue(':nomer', nomer)
        query.bindValue(':status', status)
        query.bindValue(':picr', picr)
        query.bindValue(':picg', picg)
        query.bindValue(':farmname', farmname)
        query.bindValue(':districtid', districtid)
        query.exec_()
        self.saveImage(self.rCanvas,picr)
        self.saveImage(self.gCanvas,picg)
        self.pntTableId +=1
        logging.debug(self.curFeat)
        if len(list(self.pointLayerCB.currentLayer().getFeatures()))-1==self.curFeat:
            imgName = f'{self.projectDir}/Pic/{self.rastrLayerCB.currentText()}.png' 
            id = self.districtModel.record(self.districtCBox.currentIndex()).value(0)
            name = self.districtModel.record(self.districtCBox.currentIndex()).value(2)
            regionid = self.regionModel.record(self.regionCBox.currentIndex()).value(0)
            regionname = self.regionModel.record(self.regionCBox.currentIndex()).value(2)
            farmname = self.rastrNameLineEdit.text()
            query = QSqlQuery()
            queryStr = """INSERT INTO checkeddistricts
            (id, name, regionid, regionname, picname, farmname)
            VALUES (:id, :name, :regionid, :regionname, :picname, :farmname)"""
            query.prepare(queryStr)
            query.bindValue(':id', id)
            query.bindValue(':name', name)
            query.bindValue(':regionid', regionid)
            query.bindValue(':regionname', regionname)
            query.bindValue(':picname', imgName)
            query.bindValue(':farmname', farmname)
            query.exec_()
            self.dialog = DistictImgDialog(self.rastrLayerCB.currentLayer(), self.pointLayerCB.currentLayer(), imgName)
            self.dialog.show()
            # self.saveDistrictImage()
        self.nextFeat()

    def misMatchPnt(self):
        pass
        
    def saveImage(self, canvas, filename):
        pixmap = QtGui.QPixmap(260,260)
        canvas.saveAsImage(filename, pixmap, 'png')

    def saveDistrictImage(self):
        settings = QgsMapSettings()
        # settings.setDestinationCrs(QgsCoordinateReferenceSystem("EPSG:3395"))
        settings.setBackgroundColor(QtGui.QColor(255,255,255))
        settings.setOutputSize(QSize(520,520))
        settings.setExtent(self.rastrLayerCB.currentLayer().extent())
        # layers = [self.pointLayerCB.currentLayer(), self.rastrLayerCB.currentLayer()]
        layers = [ self.pointLayerCB.currentLayer()]

        render =QgsMapRendererParallelJob(settings)
        imgName = f'{self.projectDir}/Pic/{self.rastrLayerCB.currentText()}1.png' 
        def finished():
            img=render.renderedImage()
            img.save(imgName, 'png')
        render.finished.connect(finished)
        render.start()


    def regionCBoxChanged(self, index):
        regionCn = self.regionModel.record(index).value(1)
        self.districtModel.setQuery(f'SELECT * FROM districts WHERE regionkn="{regionCn}"')
        self.districtCBox.setModelColumn(2)

    def closeEvent(self, event):
        self.curFeat = 0
        self.closingPlugin.emit()
        event.accept()

    def createReport(self):

        reportsDir = os.path.join(self.projectDir,'Reports')
        regionid = self.regionModel.record(self.regionCBox.currentIndex()).value(0)
        regionname = self.regionModel.record(self.regionCBox.currentIndex()).value(2)
        region = Region(regionname,regionid)
        regRepotsDir = os.path.join(reportsDir,regionname)
        if not os.path.exists(regRepotsDir):
            os.mkdir(regRepotsDir)
        reportFileName =f"_{regionname}_Приложение_1_привязка растровых материалов ГФД.docx"
        reportFullName = os.path.join(regRepotsDir,reportFileName)
        createAppendix11(region,reportFullName)
        reportFileName =f"_{regionname}_Таблица к Приложению_1_привязка растровых материалов ГФД.docx"
        reportFullName = os.path.join(regRepotsDir,reportFileName)
        createAppendix12(region,reportFullName)


class DistictImgDialog(QtWidgets.QDialog):
    def __init__(self, rLayer, pLayer, imgName, parent=None):
        super(DistictImgDialog,self).__init__(parent)
        self.setModal(True)
        self.filename = imgName
        self.rCanvas = QgsMapCanvas(self)
        self.rCanvas.setGeometry(10,10,480,480)
        self.rCanvas.setCanvasColor(Qt.white)
        self.rCanvas.setDestinationCrs(QgsCoordinateReferenceSystem("EPSG:3395"))
        crsDest = QgsCoordinateReferenceSystem("EPSG:3395")
        crsSrc = rLayer.crs()
        xformContext = QgsProject.instance().transformContext()
        xform = QgsCoordinateTransform(crsSrc, crsDest, xformContext)
        self.rCanvas.setLayers([pLayer, rLayer])
        self.rCanvas.setExtent(xform.transform(rLayer.extent()))
        self.rCanvas.refresh()
        self.buttonBox = QtWidgets.QDialogButtonBox(QtWidgets.QDialogButtonBox.Ok
                                 | QtWidgets.QDialogButtonBox.Cancel,self)
        self.buttonBox.setGeometry(10,500,340,32)
        self.buttonBox.accepted.connect(self.accept)
        self.buttonBox.rejected.connect(self.reject)
    def accept(self):

        pixmap = QtGui.QPixmap(480,480)
        self.rCanvas.saveAsImage(self.filename, pixmap, 'png')
        self.close()
